# -*- coding: utf-8 -*-
"""HeartDiseasePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CANul6AhcSqm-HhNhgNjCDOUcvcP1VR-
"""

#import thư viện
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# load data từ file csv lên Pandas DataFrame
df = pd.read_csv('/content/heartdata.csv')

age = df['age'];
print(age)

"""**Mô tả dữ liệu**
+ target: Trạng thái bệnh tim mạch (0 - không mắc bệnh, 1 - mắc bệnh)
+ age: tuổi
+ sex: Giới tính (0 - nữ, 1 - nam)
+ cp: loại đau ngực (0 - không có đau, 1 - có đau thường, 2 - có đau, 3 - không có đau bất thường)
+ trestbps: huyết áp khi nghỉ ngơi
+ chol: mức độ cholesterol huyết tương
+ fbs: lượng đường trong máu (0 - bth <120mg/dl, 1 - cao >=120mg/dl)
+ restecg: kết quả điện tâm đồ lúc nghỉ ngơi (0 - bth, 1 - sự cung cấp máu không đủ đến cơ tim, 2 - phì đại cơ tim ở hố đập thất trái)
+ thalach: Nhịp tim tối đa đạt được 
+ exang: Đau ngực gắng sức (0 - No, 1 - Yes)
+ oldpeak: ST chênh xuống do gắng sức so với nghỉ ngơi
+ slope: độ dốc của đoạn ST tập thể dục đỉnh (0 - dốc lên, 1 - ngang/gần ngang, 2 - dốc xuống)
+ ca: Số mạch máu chính (0-3)
+ thal: là loại bệnh về máu

**Kiểm tra thông tin dataset**
"""

# in 5 dòng đầu
df.head()

# in 5 dòng cuối
df.tail()

# Số hàng, số cột
df.shape

# Get 1 số thông tin
df.info()

df.describe()

"""**Tiền xử lý dữ liệu**"""

# Kiểm tra missing data
df.isnull().sum()

# Xóa hàng chứa giá trị null
df.dropna();

#Dữ liệu không đồng nhất
target_valid = [0,1]
target_invalid = df[~df['target'].isin(target_valid)]
print(target_invalid)

"""**Phân tích định tính dữ liệu**"""

import matplotlib.pyplot as plt
# Đếm số lượng
target_counts = df['age'].value_counts()

# Trực quan hóa bằng biểu đồ cột
target_counts.plot(kind='bar', rot=0)
plt.xlabel('Target')
plt.ylabel('Count')
plt.title('Distribution of Target')
plt.show()

# Trực quan hóa bằng biểu đồ tròn
target_counts.plot(kind='pie', autopct='%1.1f%%')
plt.axis('equal')
plt.title('Distribution of Target')
plt.show()

"""**Phân tích định lượng dữ liệu**"""

# Tính toán thống kê
mean_age = df['age'].mean()
var_age = df['age'].var()
min_age = df['age'].min()
max_age = df['age'].max()

# In kết quả thống kê
print("Mean age:", mean_age) #trung bình
print("Variance of age:", var_age) #phương sai
print("Minimum age:", min_age)
print("Maximum age:", max_age)

# Trực quan hóa bằng biểu đồ histogram
plt.hist(df['age'], bins=10, edgecolor='k')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title('Distribution of Age')
plt.show()

"""**Mối liên quan giữa các đặc tính**"""

import seaborn as sns
import matplotlib.pyplot as plt

correlation_matrix = df.corr()

# Trực quan hóa ma trận tương quan bằng biểu đồ heatmap
plt.figure(figsize=(10, 7))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Ma trận tương quan')
plt.show()

"""**Sử dụng các thuật toán học máy để dự đoán dữ liệu & So sánh các thuật toán**"""

#Tách features - target
X1 = df.drop(columns='target', axis=1)
X2 = X1.drop(columns='age', axis=1)
X = X2.drop(columns='sex', axis=1)

Y = df['target']

print(X)

print(Y)

#Tách data thành data train và data test (80-20)
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""**1. Sử dụng Logistic Regression**"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import time

# Tạo một đối tượng Logistic Regression
logreg = LogisticRegression()

# Bắt đầu đếm thời gian huấn luyện
start_time = time.time()

# Huấn luyện mô hình trên tập huấn luyện
logreg.fit(X_train, Y_train)

# Kết thúc đếm thời gian huấn luyện
end_time = time.time()
# Tính thời gian huấn luyện
training_time = end_time - start_time

# Dự đoán trên tập huấn luyện và tập kiểm tra
Y_train_pred = logreg.predict(X_train)
Y_test_pred = logreg.predict(X_test)

# Tính độ chính xác trên tập huấn luyện và tập kiểm tra
train_accuracy = accuracy_score(Y_train, Y_train_pred)
test_accuracy = accuracy_score(Y_test, Y_test_pred)
# In kết quả
print("Accuracy on training set: {:.2f}%".format(train_accuracy * 100))
print("Accuracy on test set: {:.2f}%".format(test_accuracy * 100))
print("Training time: {:.2f} seconds".format(training_time))

"""**2. Sử dụng KNeighborsClassifier (KNN)**"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import time

# Tạo một đối tượng KNN với số láng giềng K (k_neighbors) được chỉ định
knn = KNeighborsClassifier(n_neighbors=5)

# Bắt đầu đếm thời gian huấn luyện
start_time = time.time()

# Huấn luyện mô hình trên tập huấn luyện
knn.fit(X_train, Y_train)

# Kết thúc đếm thời gian huấn luyện
end_time = time.time()

# Tính thời gian huấn luyện
training_time = end_time - start_time

# Dự đoán trên tập huấn luyện và tập kiểm tra
Y_train_pred = knn.predict(X_train)
Y_test_pred = knn.predict(X_test)

# Tính độ chính xác trên tập huấn luyện và tập kiểm tra
train_accuracy = accuracy_score(Y_train, Y_train_pred)
test_accuracy = accuracy_score(Y_test, Y_test_pred)

# In kết quả
print("Accuracy on training set: {:.2f}%".format(train_accuracy * 100))
print("Accuracy on test set: {:.2f}%".format(test_accuracy * 100))
print("Training time: {:.2f} seconds".format(training_time))

"""**3. Sử dụng Support Vector Machine (SVM)**"""

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
import time

# Tạo một đối tượng SVM
svm = SVC()

# Bắt đầu đếm thời gian huấn luyện
start_time = time.time()

# Huấn luyện mô hình trên tập huấn luyện
svm.fit(X_train, Y_train)

# Kết thúc đếm thời gian huấn luyện
end_time = time.time()

# Tính thời gian huấn luyện
training_time = end_time - start_time

# Dự đoán trên tập huấn luyện và tập kiểm tra
Y_train_pred = svm.predict(X_train)
Y_test_pred = svm.predict(X_test)

# Tính độ chính xác trên tập huấn luyện và tập kiểm tra
train_accuracy = accuracy_score(Y_train, Y_train_pred)
test_accuracy = accuracy_score(Y_test, Y_test_pred)

# In kết quả
print("Accuracy on training set: {:.2f}%".format(train_accuracy * 100))
print("Accuracy on test set: {:.2f}%".format(test_accuracy * 100))
print("Training time: {:.2f} seconds".format(training_time))

"""**4. Sử dụng Random Forest Classifier**"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import time

# Tạo một đối tượng Random Forest với số cây quyết định (n_estimators) được chỉ định
rf = RandomForestClassifier(n_estimators=100)

# Bắt đầu đếm thời gian huấn luyện
start_time = time.time()

# Huấn luyện mô hình trên tập huấn luyện
rf.fit(X_train, Y_train)

# Kết thúc đếm thời gian huấn luyện
end_time = time.time()

# Tính thời gian huấn luyện
training_time = end_time - start_time

# Dự đoán trên tập huấn luyện và tập kiểm tra
Y_train_pred = rf.predict(X_train)
Y_test_pred = rf.predict(X_test)

# Tính độ chính xác trên tập huấn luyện và tập kiểm tra
train_accuracy = accuracy_score(Y_train, Y_train_pred)
test_accuracy = accuracy_score(Y_test, Y_test_pred)

# In kết quả
print("Accuracy on training set: {:.2f}%".format(train_accuracy * 100))
print("Accuracy on test set: {:.2f}%".format(test_accuracy * 100))
print("Training time: {:.2f} seconds".format(training_time))

"""**Đưa dữ liệu vào 4 mô hình đã train để dự đoán**"""

# Dữ liệu mới cần dự đoán
new_data = [[50, 1, 0, 140, 268, 0, 0, 160, 0, 3.6, 0, 0, 0]]

# Chạy dự đoán trên mô hình Logistic Regression
logreg_prediction = logreg.predict(new_data)
print("Logistic Regression prediction:", logreg_prediction)

# Chạy dự đoán trên mô hình KNN
knn_prediction = knn.predict(new_data)
print("KNN prediction:", knn_prediction)

# Chạy dự đoán trên mô hình SVM
svm_prediction = svm.predict(new_data)
print("SVM prediction:", svm_prediction)

# Chạy dự đoán trên mô hình Random Forest
rf_prediction = rf.predict(new_data)
print("Random Forest prediction:", rf_prediction)

"""**Đưa ra kết luận cho dữ liệu**

Dựa trên các kết quả trên, mô hình Logistic Regression là lựa chọn tốt nhất cho bài toán này. Vì nó có độ chính xác cao trên cả tập huấn luyện và tập kiểm tra, thời gian huấn luyện nhanh và đơn giản hơn so với các mô hình khác.

**Demo Heart Disease Prediction bằng Logistic Regression trên Website**
"""